{"version":3,"sources":["AppContext.tsx","utils/utilities.ts","components/HeaderWithSettings.tsx","components/SubmitButton.tsx","views/VerifyView.tsx","views/HomeView.tsx","views/ErrorView.tsx","views/ReceiptsView.tsx","views/CaptureKeyView.tsx","layouts/Default.tsx","routes.tsx","hooks/useLocalStorage.tsx","App.tsx","index.tsx"],"names":["AppContext","React","createContext","apiKey","setAPIKey","value","console","log","clientInstance","receipts","setReceipts","contracts","setContracts","themeType","setThemeType","getEtherScanApi","network","getNetworkName","client","a","call","Error","name","toLowerCase","getReceiptStatus","receiptGuid","etherscanApi","params","axios","get","response","result","data","HomeIcon","from","exact","activeStyle","getStyleFilterIcon","title","to","pathname","state","style","marginRight","filter","width","height","viewBox","className","fill","xmlns","d","fillRule","SettingsIcon","brightness","ReceiptsIcon","HeaderWithSettings","showBackButton","Consumer","float","SubmitButton","text","isSubmitting","padding","type","disabled","role","getContractFileName","compilationResult","contractName","compiledContracts","fileName","Object","keys","file","getContractMetadata","contractMetadata","contract","metadata","VerifyView","onVerifiedContract","useState","results","setResults","onVerifyContract","values","contractArguments","replace","verify","apiKeyParam","contractAddress","contractArgumentsParam","compilationResultParam","contractMetadataParsed","JSON","parse","jsonInput","language","sources","source","settings","optimizer","enabled","runs","apikey","module","action","codeformat","contractaddress","sourceCode","stringify","contractname","compilerversion","compiler","version","constructorArguements","body","FormData","forEach","key","append","emit","post","message","status","resetAfter10Seconds","receiptStatus","guid","setTimeout","verificationResult","initialValues","validate","errors","trim","onSubmit","touched","handleSubmit","htmlFor","as","map","item","component","placeholder","marginTop","fontSize","textAlign","dangerouslySetInnerHTML","__html","HomeView","receipt","newReceipts","ErrorView","display","flexDirection","alignItems","paddingBottom","src","alt","color","href","ReceiptsView","onGetReceiptStatus","marginBottom","ReceiptsTable","scope","length","index","CaptureKeyView","location","useLocation","history","useHistory","push","DefaultLayout","children","RouteWithHeader","Component","rest","render","matchProps","Routes","path","useLocalStorage","initialValue","window","localStorage","getItem","error","storedValue","setStoredValue","valueToStore","Function","setItem","getNewContractNames","newContractNames","App","undefined","setClientInstance","clientInstanceRef","useRef","current","contractsRef","useEffect","PluginClient","createClient","onload","on","languageVersion","newContractsNames","newContractsToSave","uniqueContracts","Set","loadClient","receiptsNotVerified","timer1","setInterval","currentReceipt","clearInterval","Provider","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.d44915b3.chunk.js","sourcesContent":["import React from \"react\"\nimport { PluginClient } from \"@remixproject/plugin\"\n\nimport { Receipt, ThemeType } from \"./types\"\n\nexport const AppContext = React.createContext({\n  apiKey: \"\",\n  setAPIKey: (value: string) => {\n    console.log(\"Set API Key from Context\")\n  },\n  clientInstance: {} as PluginClient,\n  receipts: [] as Receipt[],\n  setReceipts: (receipts: Receipt[]) => {\n    console.log(\"Calling Set Receipts\")\n  },\n  contracts: [] as string[],\n  setContracts: (contracts: string[]) => {\n    console.log(\"Calling Set Contract Names\")\n  },\n  themeType: \"dark\" as ThemeType,\n  setThemeType: (themeType: ThemeType) => {\n    console.log(\"Calling Set Theme Type\")\n  },\n})\n","import { PluginClient } from \"@remixproject/plugin\"\nimport axios from 'axios'\ntype RemixClient = PluginClient\n\nexport const getEtherScanApi = (network: string) => {\n  return network === \"main\"\n    ? `https://api.etherscan.io/api`\n    : `https://api-${network}.etherscan.io/api`\n}\n\nexport const getNetworkName = async (client: RemixClient) => {\n  const network = await client.call(\"network\", \"detectNetwork\")\n  if (!network) {\n    throw new Error(\"no known network to verify against\")\n  }\n  const name = network.name!.toLowerCase()\n  // TODO : remove that when https://github.com/ethereum/remix-ide/issues/2017 is fixe\n  return name === \"görli\" ? \"goerli\" : name\n}\n\nexport const getReceiptStatus = async (\n  receiptGuid: string,\n  apiKey: string,\n  etherscanApi: string\n) => {\n  const params = `guid=${receiptGuid}&module=contract&action=checkverifystatus&apiKey=${apiKey}`\n  try {\n    const response = await axios.get(`${etherscanApi}?${params}`)\n    const { result } = response.data\n    return result\n  } catch (error) {\n    console.log(\"Error\", error)\n  }\n}\n","import React from \"react\"\n\nimport { NavLink } from \"react-router-dom\"\nimport { AppContext } from \"../AppContext\"\nimport { ThemeType } from \"../types\"\n\ninterface Props {\n  title?: string\n  showBackButton?: boolean\n  from: string\n}\n\ninterface IconProps {\n  from: string\n  themeType: ThemeType\n}\n\nconst HomeIcon: React.FC<IconProps> = ({ from, themeType }: IconProps) => {\n  return (\n    <NavLink\n      exact={true}\n      activeStyle={getStyleFilterIcon(themeType)}\n      data-toggle=\"tooltip\"\n      data-placement=\"top\"\n      title=\"Home\"\n      to={{\n        pathname: \"/\",\n        state: { from },\n      }}\n      style={{ marginRight: \"0.4em\" }}\n    >\n      <svg\n        style={{ filter: \"invert(0.5)\" }}\n        width=\"1em\"\n        height=\"1em\"\n        viewBox=\"0 0 16 16\"\n        className=\"bi bi-house-door-fill\"\n        fill=\"currentColor\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path d=\"M6.5 10.995V14.5a.5.5 0 0 1-.5.5H2a.5.5 0 0 1-.5-.5v-7a.5.5 0 0 1 .146-.354l6-6a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 .146.354v7a.5.5 0 0 1-.5.5h-4a.5.5 0 0 1-.5-.5V11c0-.25-.25-.5-.5-.5H7c-.25 0-.5.25-.5.495z\" />\n        <path\n          fillRule=\"evenodd\"\n          d=\"M13 2.5V6l-2-2V2.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5z\"\n        />\n      </svg>\n    </NavLink>\n  )\n}\n\nconst SettingsIcon: React.FC<IconProps> = ({ from, themeType }: IconProps) => {\n  return (\n    <NavLink\n      activeStyle={getStyleFilterIcon(themeType)}\n      data-toggle=\"tooltip\"\n      data-placement=\"top\"\n      title=\"Settings\"\n      to={{\n        pathname: \"/settings\",\n        state: { from },\n      }}\n    >\n      <svg\n        style={{ filter: \"invert(0.5)\" }}\n        width=\"1em\"\n        height=\"1em\"\n        viewBox=\"0 0 16 16\"\n        className=\"bi bi-gear-fill\"\n        fill=\"currentColor\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path\n          fillRule=\"evenodd\"\n          d=\"M9.405 1.05c-.413-1.4-2.397-1.4-2.81 0l-.1.34a1.464 1.464 0 0 1-2.105.872l-.31-.17c-1.283-.698-2.686.705-1.987 1.987l.169.311c.446.82.023 1.841-.872 2.105l-.34.1c-1.4.413-1.4 2.397 0 2.81l.34.1a1.464 1.464 0 0 1 .872 2.105l-.17.31c-.698 1.283.705 2.686 1.987 1.987l.311-.169a1.464 1.464 0 0 1 2.105.872l.1.34c.413 1.4 2.397 1.4 2.81 0l.1-.34a1.464 1.464 0 0 1 2.105-.872l.31.17c1.283.698 2.686-.705 1.987-1.987l-.169-.311a1.464 1.464 0 0 1 .872-2.105l.34-.1c1.4-.413 1.4-2.397 0-2.81l-.34-.1a1.464 1.464 0 0 1-.872-2.105l.17-.31c.698-1.283-.705-2.686-1.987-1.987l-.311.169a1.464 1.464 0 0 1-2.105-.872l-.1-.34zM8 10.93a2.929 2.929 0 1 0 0-5.86 2.929 2.929 0 0 0 0 5.858z\"\n        />\n\n        <path\n          fillRule=\"evenodd\"\n          d=\"M9.405 1.05c-.413-1.4-2.397-1.4-2.81 0l-.1.34a1.464 1.464 0 0 1-2.105.872l-.31-.17c-1.283-.698-2.686.705-1.987 1.987l.169.311c.446.82.023 1.841-.872 2.105l-.34.1c-1.4.413-1.4 2.397 0 2.81l.34.1a1.464 1.464 0 0 1 .872 2.105l-.17.31c-.698 1.283.705 2.686 1.987 1.987l.311-.169a1.464 1.464 0 0 1 2.105.872l.1.34c.413 1.4 2.397 1.4 2.81 0l.1-.34a1.464 1.464 0 0 1 2.105-.872l.31.17c1.283.698 2.686-.705 1.987-1.987l-.169-.311a1.464 1.464 0 0 1 .872-2.105l.34-.1c1.4-.413 1.4-2.397 0-2.81l-.34-.1a1.464 1.464 0 0 1-.872-2.105l.17-.31c.698-1.283-.705-2.686-1.987-1.987l-.311.169a1.464 1.464 0 0 1-2.105-.872l-.1-.34zM8 10.93a2.929 2.929 0 1 0 0-5.86 2.929 2.929 0 0 0 0 5.858z\"\n        />\n      </svg>\n    </NavLink>\n  )\n}\n\nconst getStyleFilterIcon = (themeType: ThemeType) => {\n  const invert = themeType === \"dark\" ? 1 : 0\n  const brightness = themeType === \"dark\" ? \"150\" : \"0\" // should be >100 for icons with color\n  return {\n    filter: `invert(${invert}) grayscale(1) brightness(${brightness}%)`,\n  }\n}\n\nconst ReceiptsIcon: React.FC<IconProps> = ({ from, themeType }: IconProps) => {\n  return (\n    <NavLink\n      activeStyle={getStyleFilterIcon(themeType)}\n      data-toggle=\"tooltip\"\n      data-placement=\"top\"\n      title=\"Receipts\"\n      to={{\n        pathname: \"/receipts\",\n        state: { from },\n      }}\n      style={{ marginRight: \"0.4em\" }}\n    >\n      <svg\n        style={{ filter: \"invert(0.5)\" }}\n        width=\"1em\"\n        height=\"1em\"\n        viewBox=\"0 0 16 16\"\n        className=\"bi bi-receipt\"\n        fill=\"currentColor\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path\n          fillRule=\"evenodd\"\n          d=\"M1.92.506a.5.5 0 0 1 .434.14L3 1.293l.646-.647a.5.5 0 0 1 .708 0L5 1.293l.646-.647a.5.5 0 0 1 .708 0L7 1.293l.646-.647a.5.5 0 0 1 .708 0L9 1.293l.646-.647a.5.5 0 0 1 .708 0l.646.647.646-.647a.5.5 0 0 1 .708 0l.646.647.646-.647a.5.5 0 0 1 .801.13l.5 1A.5.5 0 0 1 15 2v12a.5.5 0 0 1-.053.224l-.5 1a.5.5 0 0 1-.8.13L13 14.707l-.646.647a.5.5 0 0 1-.708 0L11 14.707l-.646.647a.5.5 0 0 1-.708 0L9 14.707l-.646.647a.5.5 0 0 1-.708 0L7 14.707l-.646.647a.5.5 0 0 1-.708 0L5 14.707l-.646.647a.5.5 0 0 1-.708 0L3 14.707l-.646.647a.5.5 0 0 1-.801-.13l-.5-1A.5.5 0 0 1 1 14V2a.5.5 0 0 1 .053-.224l.5-1a.5.5 0 0 1 .367-.27zm.217 1.338L2 2.118v11.764l.137.274.51-.51a.5.5 0 0 1 .707 0l.646.647.646-.646a.5.5 0 0 1 .708 0l.646.646.646-.646a.5.5 0 0 1 .708 0l.646.646.646-.646a.5.5 0 0 1 .708 0l.646.646.646-.646a.5.5 0 0 1 .708 0l.646.646.646-.646a.5.5 0 0 1 .708 0l.509.509.137-.274V2.118l-.137-.274-.51.51a.5.5 0 0 1-.707 0L12 1.707l-.646.647a.5.5 0 0 1-.708 0L10 1.707l-.646.647a.5.5 0 0 1-.708 0L8 1.707l-.646.647a.5.5 0 0 1-.708 0L6 1.707l-.646.647a.5.5 0 0 1-.708 0L4 1.707l-.646.647a.5.5 0 0 1-.708 0l-.509-.51z\"\n        />\n\n        <path\n          fillRule=\"evenodd\"\n          d=\"M3 4.5a.5.5 0 0 1 .5-.5h6a.5.5 0 1 1 0 1h-6a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h6a.5.5 0 1 1 0 1h-6a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h6a.5.5 0 1 1 0 1h-6a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h6a.5.5 0 0 1 0 1h-6a.5.5 0 0 1-.5-.5zm8-6a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 0 1h-1a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 0 1h-1a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 0 1h-1a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 0 1h-1a.5.5 0 0 1-.5-.5z\"\n        />\n      </svg>\n    </NavLink>\n  )\n}\nexport const HeaderWithSettings: React.FC<Props> = ({\n  title = \"\",\n  showBackButton = false,\n  from,\n}) => {\n  return (\n    <AppContext.Consumer>\n      {({ themeType }) => (\n        <div>\n          <h6>{title}</h6>\n          <div style={{ float: \"right\" }}>\n            <HomeIcon from={from} themeType={themeType} />\n\n            <ReceiptsIcon from={from} themeType={themeType} />\n\n            <SettingsIcon from={from} themeType={themeType} />\n          </div>\n        </div>\n      )}\n    </AppContext.Consumer>\n  )\n}\n","import React from \"react\"\n\ninterface Props {\n  text: string\n  isSubmitting?: boolean\n}\n\nexport const SubmitButton: React.FC<Props> = ({\n  text,\n  isSubmitting = false,\n}) => {\n  return (\n    <button\n      style={{ padding: \"0.25rem 0.4rem\", marginRight: \"0.5em\" }}\n      type=\"submit\"\n      className=\"btn btn-primary\"\n      disabled={isSubmitting}\n    >\n      {!isSubmitting && text}\n\n      {isSubmitting && (\n        <div>\n          <span\n            className=\"spinner-border spinner-border-sm\"\n            role=\"status\"\n            aria-hidden=\"true\"\n            style={{ marginRight: \"0.3em\" }}\n          />\n          Verifying...Please wait\n        </div>\n      )}\n    </button>\n  )\n}\n","import React, { useState } from \"react\"\n\nimport {\n  PluginClient,\n} from \"@remixproject/plugin\"\nimport { Formik, ErrorMessage, Field } from \"formik\"\n\nimport { getNetworkName, getEtherScanApi, getReceiptStatus } from \"../utils\"\nimport { SubmitButton } from \"../components\"\nimport { Receipt } from \"../types\"\nimport { CompilationResult } from \"@remixproject/plugin-api\"\nimport axios from 'axios'\n\ninterface Props {\n  client: PluginClient\n  apiKey: string\n  onVerifiedContract: (receipt: Receipt) => void\n  contracts: string[]\n}\n\ninterface FormValues {\n  contractName: string\n  contractArguments: string\n  contractAddress: string\n}\n\nexport const getContractFileName = (\n  compilationResult: CompilationResult,\n  contractName: string\n) => {\n  const compiledContracts = compilationResult.contracts\n  let fileName = \"\"\n\n  for (const file of Object.keys(compiledContracts)) {\n    for (const contract of Object.keys(compiledContracts[file])) {\n      if (contract === contractName) {\n        fileName = file\n        break\n      }\n    }\n  }\n  return fileName\n}\n\nexport const getContractMetadata = (\n  compilationResult: CompilationResult,\n  contractName: string\n) => {\n  const compiledContracts = compilationResult.contracts\n  let contractMetadata = \"\"\n\n  for (const file of Object.keys(compiledContracts)) {\n    for (const contract of Object.keys(compiledContracts[file])) {\n      if (contract === contractName) {\n        contractMetadata = compiledContracts[file][contract].metadata\n        if (contractMetadata) {\n          break\n        }\n      }\n    }\n  }\n  return contractMetadata\n}\n\nexport const VerifyView: React.FC<Props> = ({\n  apiKey,\n  client,\n  contracts,\n  onVerifiedContract,\n}) => {\n  const [results, setResults] = useState(\"\")\n\n  const onVerifyContract = async (values: FormValues) => {\n    const compilationResult = (await client.call(\n      \"solidity\",\n      \"getCompilationResult\"\n    )) as any\n\n    if (!compilationResult) {\n      throw new Error(\"no compilation result available\")\n    }\n\n    const contractArguments = values.contractArguments.replace(\"0x\", \"\")\n\n    const verify = async (\n      apiKeyParam: string,\n      contractAddress: string,\n      contractArgumentsParam: string,\n      contractName: string,\n      compilationResultParam: any\n    ) => {\n      const network = await getNetworkName(client)\n      if (network === \"vm\") {\n        return \"Cannot verify in the selected network\"\n      }\n      const etherscanApi = getEtherScanApi(network)\n\n      try {\n        const contractMetadata = getContractMetadata(\n          compilationResultParam.data,\n          contractName\n        )\n\n        if (!contractMetadata) {\n          return \"Please recompile contract\"\n        }\n        \n        const contractMetadataParsed = JSON.parse(contractMetadata)\n\n        const fileName = getContractFileName(\n          compilationResultParam.data,\n          contractName\n        )\n\n        const jsonInput = {\n          language: 'Solidity',\n          sources: compilationResultParam.source.sources,\n          settings: {\n            optimizer: {\n              enabled: contractMetadataParsed.settings.optimizer.enabled,\n              runs: contractMetadataParsed.settings.optimizer.runs\n            }\n          }\n        }\n\n        const data: { [key: string]: string | any } = {\n          apikey: apiKeyParam, // A valid API-Key is required\n          module: \"contract\", // Do not change\n          action: \"verifysourcecode\", // Do not change\n          codeformat: \"solidity-standard-json-input\",\n          contractaddress: contractAddress, // Contract Address starts with 0x...\n          sourceCode: JSON.stringify(jsonInput),\n          contractname: fileName + ':' + contractName,\n          compilerversion: `v${contractMetadataParsed.compiler.version}`, // see http://etherscan.io/solcversions for list of support versions\n          constructorArguements: contractArgumentsParam, // if applicable\n        }\n\n        const body = new FormData()\n        Object.keys(data).forEach((key) => body.append(key, data[key]))\n\n        client.emit(\"statusChanged\", {\n          key: \"loading\",\n          type: \"info\",\n          title: \"Verifying ...\",\n        })\n        const response = await axios.post(etherscanApi, body)\n        const { message, result, status } = await response.data\n\n        if (message === \"OK\" && status === \"1\") {\n          resetAfter10Seconds()\n          const receiptStatus = await getReceiptStatus(\n            result,\n            apiKey,\n            etherscanApi\n          )\n\n          onVerifiedContract({\n            guid: result,\n            status: receiptStatus,\n          })\n          return `Contract verified correctly <br> Receipt GUID ${result}`\n        }\n        if (message === \"NOTOK\") {\n          client.emit(\"statusChanged\", {\n            key: \"failed\",\n            type: \"error\",\n            title: result,\n          })\n          resetAfter10Seconds()\n        }\n        return result\n      } catch (error) {\n        console.log(\"Error, something wrong happened\", error)\n        setResults(\"Something wrong happened, try again\")\n      }\n    }\n\n    const resetAfter10Seconds = () => {\n      setTimeout(() => {\n        client.emit(\"statusChanged\", { key: \"none\" })\n        setResults(\"\")\n      }, 10000)\n    }\n\n    const verificationResult = await verify(\n      apiKey,\n      values.contractAddress,\n      contractArguments,\n      values.contractName,\n      compilationResult\n    )\n\n    setResults(verificationResult)\n  }\n\n  return (\n    <div>\n      <Formik\n        initialValues={{\n          contractName: \"\",\n          contractArguments: \"\",\n          contractAddress: \"\",\n        }}\n        validate={(values) => {\n          const errors = {} as any\n          if (!values.contractName) {\n            errors.contractName = \"Required\"\n          }\n          if (!values.contractAddress) {\n            errors.contractAddress = \"Required\"\n          }\n          if (values.contractAddress.trim() === \"\") {\n            errors.contractAddress = \"Please enter a valid contract address\"\n          }\n          return errors\n        }}\n        onSubmit={(values) => onVerifyContract(values)}\n      >\n        {({ errors, touched, handleSubmit, isSubmitting }) => (\n          <form onSubmit={handleSubmit}>\n            <div className=\"form-group\">\n              <h6>Verify your smart contracts</h6>\n              <label htmlFor=\"contractName\">Contract</label>\n              <Field\n                as=\"select\"\n                className={\n                  errors.contractName && touched.contractName\n                    ? \"form-control form-control-sm is-invalid\"\n                    : \"form-control form-control-sm\"\n                }\n                name=\"contractName\"\n              >\n                <option disabled={true} value=\"\">\n                  Select a contract\n                </option>\n                {contracts.map((item) => (\n                  <option key={item} value={item}>\n                    {item}\n                  </option>\n                ))}\n              </Field>\n              <ErrorMessage\n                className=\"invalid-feedback\"\n                name=\"contractName\"\n                component=\"div\"\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"contractArguments\">Constructor Arguments</label>\n              <Field\n                className={\n                  errors.contractArguments && touched.contractArguments\n                    ? \"form-control form-control-sm is-invalid\"\n                    : \"form-control form-control-sm\"\n                }\n                type=\"text\"\n                name=\"contractArguments\"\n                placeholder=\"hex encoded\"\n              />\n              <ErrorMessage\n                className=\"invalid-feedback\"\n                name=\"contractArguments\"\n                component=\"div\"\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"contractAddress\">Contract Address</label>\n              <Field\n                className={\n                  errors.contractAddress && touched.contractAddress\n                    ? \"form-control form-control-sm is-invalid\"\n                    : \"form-control form-control-sm\"\n                }\n                type=\"text\"\n                name=\"contractAddress\"\n                placeholder=\"i.e. 0x11b79afc03baf25c631dd70169bb6a3160b2706e\"\n              />\n              <ErrorMessage\n                className=\"invalid-feedback\"\n                name=\"contractAddress\"\n                component=\"div\"\n              />\n            </div>\n\n            <SubmitButton text=\"Verify Contract\" isSubmitting={isSubmitting} />\n          </form>\n        )}\n      </Formik>\n\n      <div\n        style={{ marginTop: \"2em\", fontSize: \"0.8em\", textAlign: \"center\" }}\n        dangerouslySetInnerHTML={{ __html: results }}\n      />\n\n      {/* <div style={{ display: \"block\", textAlign: \"center\", marginTop: \"1em\" }}>\n        <Link to=\"/receipts\">View Receipts</Link>\n      </div> */}\n    </div>\n  )\n}\n","import React from \"react\"\n\nimport { Redirect } from \"react-router-dom\"\n\nimport { AppContext } from \"../AppContext\"\nimport { Receipt } from \"../types\"\n\nimport { VerifyView } from \"./VerifyView\"\n\nexport const HomeView: React.FC = () => {\n  // const [hasError, setHasError] = useState(false)\n  return (\n    <AppContext.Consumer>\n      {({ apiKey, clientInstance, setReceipts, receipts, contracts }) =>\n        !apiKey ? (\n          <Redirect\n            to={{\n              pathname: \"/settings\",\n              state: { from: \"/\" },\n            }}\n          />\n        ) : (\n          <VerifyView\n            contracts={contracts}\n            client={clientInstance}\n            apiKey={apiKey}\n            onVerifiedContract={(receipt: Receipt) => {\n              const newReceipts = [...receipts, receipt]\n\n              setReceipts(newReceipts)\n            }}\n          />\n        )\n      }\n    </AppContext.Consumer>\n  )\n}\n","import React from \"react\"\n\nexport const ErrorView: React.FC = () => {\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n      }}\n    >\n      <img\n        style={{ paddingBottom: \"2em\" }}\n        width=\"250\"\n        src=\"https://res.cloudinary.com/key-solutions/image/upload/v1580400635/solid/error-png.png\"\n        alt=\"Error page\"\n      />\n      <h5>Sorry, something unexpected happened. </h5>\n      <h5>\n        Please raise an issue:{\" \"}\n        <a\n          style={{ color: \"red\" }}\n          href=\"https://github.com/machinalabs/remix-etherscan/issues\"\n        >\n          Here\n        </a>\n      </h5>\n    </div>\n  )\n}\n","import React, { useState } from \"react\"\n\nimport { Formik, ErrorMessage, Field } from \"formik\"\nimport { getEtherScanApi, getNetworkName, getReceiptStatus } from \"../utils\"\nimport { Receipt } from \"../types\"\nimport { AppContext } from \"../AppContext\"\nimport { SubmitButton } from \"../components\"\nimport { Redirect } from \"react-router-dom\"\n\ninterface FormValues {\n  receiptGuid: string\n}\n\nexport const ReceiptsView: React.FC = () => {\n  const [results, setResults] = useState(\"\")\n  const onGetReceiptStatus = async (\n    values: FormValues,\n    clientInstance: any,\n    apiKey: string\n  ) => {\n    try {\n      const network = await getNetworkName(clientInstance)\n      if (network === \"vm\") {\n        setResults(\"Cannot verify in the selected network\")\n        return\n      }\n      const etherscanApi = getEtherScanApi(network)\n      const result = await getReceiptStatus(\n        values.receiptGuid,\n        apiKey,\n        etherscanApi\n      )\n      setResults(result)\n    } catch (error) {\n      setResults(error.message)\n    }\n  }\n\n  return (\n    <AppContext.Consumer>\n      {({ apiKey, clientInstance, receipts }) =>\n        !apiKey ? (\n          <Redirect\n            to={{\n              pathname: \"/settings\",\n              state: { from: \"/\" },\n            }}\n          />\n        ) : (\n          <div>\n            <Formik\n              initialValues={{ receiptGuid: \"\" }}\n              validate={(values) => {\n                const errors = {} as any\n                if (!values.receiptGuid) {\n                  errors.receiptGuid = \"Required\"\n                }\n                return errors\n              }}\n              onSubmit={(values) =>\n                onGetReceiptStatus(values, clientInstance, apiKey)\n              }\n            >\n              {({ errors, touched, handleSubmit }) => (\n                <form onSubmit={handleSubmit}>\n                  <div\n                    className=\"form-group\"\n                    style={{ marginBottom: \"0.5rem\" }}\n                  >\n                    <h6>Get your Receipt GUID status</h6>\n                    <label htmlFor=\"receiptGuid\">Receipt GUID</label>\n                    <Field\n                      className={\n                        errors.receiptGuid && touched.receiptGuid\n                          ? \"form-control form-control-sm is-invalid\"\n                          : \"form-control form-control-sm\"\n                      }\n                      type=\"text\"\n                      name=\"receiptGuid\"\n                    />\n                    <ErrorMessage\n                      className=\"invalid-feedback\"\n                      name=\"receiptGuid\"\n                      component=\"div\"\n                    />\n                  </div>\n\n                  <SubmitButton text=\"Check\" />\n                </form>\n              )}\n            </Formik>\n\n            <div\n              style={{\n                marginTop: \"2em\",\n                fontSize: \"0.8em\",\n                textAlign: \"center\",\n              }}\n              dangerouslySetInnerHTML={{ __html: results }}\n            />\n\n            <ReceiptsTable receipts={receipts} />\n          </div>\n        )\n      }\n    </AppContext.Consumer>\n  )\n}\n\nconst ReceiptsTable: React.FC<{ receipts: Receipt[] }> = ({ receipts }) => {\n  return (\n    <div className=\"table-responsive\" style={{ fontSize: \"0.7em\" }}>\n      <h6>Receipts</h6>\n      <table className=\"table table-sm\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Guid</th>\n            <th scope=\"col\">Status</th>\n          </tr>\n        </thead>\n        <tbody>\n          {receipts &&\n            receipts.length > 0 &&\n            receipts.map((item: Receipt, index) => {\n              return (\n                <tr key={item.guid}>\n                  <td>{item.guid}</td>\n                  <td>{item.status}</td>\n                </tr>\n              )\n            })}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n","import React from \"react\"\n\nimport { Formik, ErrorMessage, Field } from \"formik\"\nimport { useHistory, useLocation } from \"react-router-dom\"\n\nimport { AppContext } from \"../AppContext\"\nimport { SubmitButton } from \"../components\"\n\nexport const CaptureKeyView: React.FC = () => {\n  const location = useLocation()\n  const history = useHistory()\n  return (\n    <AppContext.Consumer>\n      {({ apiKey, setAPIKey }) => (\n        <Formik\n          initialValues={{ apiKey }}\n          validate={(values) => {\n            const errors = {} as any\n            if (!values.apiKey) {\n              errors.apiKey = \"Required\"\n            }\n            return errors\n          }}\n          onSubmit={(values) => {\n            setAPIKey(values.apiKey)\n            history.push((location.state as any).from)\n          }}\n        >\n          {({ errors, touched, handleSubmit }) => (\n            <form onSubmit={handleSubmit}>\n              <div className=\"form-group\" style={{ marginBottom: \"0.5rem\" }}>\n                <label htmlFor=\"apikey\">Please Enter your API key</label>\n                <Field\n                  className={\n                    errors.apiKey && touched.apiKey\n                      ? \"form-control form-control-sm is-invalid\"\n                      : \"form-control form-control-sm\"\n                  }\n                  type=\"text\"\n                  name=\"apiKey\"\n                  placeholder=\"Example: GM1T20XY6JGSAPWKDCYZ7B2FJXKTJRFVGZ\"\n                />\n                <ErrorMessage\n                  className=\"invalid-feedback\"\n                  name=\"apiKey\"\n                  component=\"div\"\n                />\n              </div>\n\n              <div>\n                <SubmitButton text=\"Save API key\" />\n              </div>\n            </form>\n          )}\n        </Formik>\n      )}\n    </AppContext.Consumer>\n  )\n}\n","import React, { PropsWithChildren } from \"react\"\n\nimport { HeaderWithSettings } from \"../components\"\n\ninterface Props {\n  from: string\n}\n\nexport const DefaultLayout: React.FC<PropsWithChildren<Props>> = ({\n  children,\n  from,\n}) => {\n  return (\n    <div>\n      <HeaderWithSettings from={from} />\n      {children}\n    </div>\n  )\n}\n","import React from \"react\"\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  RouteProps,\n} from \"react-router-dom\"\n\nimport { ErrorView, HomeView, ReceiptsView, CaptureKeyView } from \"./views\"\nimport { DefaultLayout } from \"./layouts\"\n\ninterface Props extends RouteProps {\n  component: any // TODO: new (props: any) => React.Component\n  from: string\n}\n\nconst RouteWithHeader = ({ component: Component, ...rest }: Props) => {\n  return (\n    <Route\n      {...rest}\n      render={(matchProps) => (\n        <DefaultLayout {...rest}>\n          <Component {...matchProps} />\n        </DefaultLayout>\n      )}\n    />\n  )\n}\n\nexport const Routes = () => (\n  <Router>\n    <Switch>\n      <RouteWithHeader exact path=\"/\" component={HomeView} from=\"/\" />\n      <Route exact path=\"/error\">\n        <ErrorView />\n      </Route>\n      <RouteWithHeader\n        exact\n        path=\"/receipts\"\n        component={ReceiptsView}\n        from=\"/receipts\"\n      />\n      <RouteWithHeader\n        exact\n        path=\"/settings\"\n        from=\"/settings\"\n        component={CaptureKeyView}\n      />\n    </Switch>\n  </Router>\n)\n","import { useState } from \"react\"\n\nexport function useLocalStorage(key: string, initialValue: any) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key)\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error)\n      return initialValue\n    }\n  })\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value: any) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value\n      // Save state\n      setStoredValue(valueToStore)\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore))\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error)\n    }\n  }\n\n  return [storedValue, setValue]\n}\n","import React, { useState, useEffect, useRef } from \"react\"\n\nimport {\n  CompilationFileSources,\n  CompilationResult,\n} from \"@remixproject/plugin-api\"\n\nimport { PluginClient } from \"@remixproject/plugin\";\nimport { createClient } from \"@remixproject/plugin-webview\";\n\nimport { AppContext } from \"./AppContext\"\nimport { Routes } from \"./routes\"\n\nimport { useLocalStorage } from \"./hooks/useLocalStorage\"\n\nimport { getReceiptStatus, getEtherScanApi, getNetworkName } from \"./utils\"\nimport { Receipt, ThemeType } from \"./types\"\n\nimport \"./App.css\"\n\nexport const getNewContractNames = (compilationResult: CompilationResult) => {\n  const compiledContracts = compilationResult.contracts\n  let result: string[] = []\n\n  for (const file of Object.keys(compiledContracts)) {\n    const newContractNames = Object.keys(compiledContracts[file])\n    result = [...result, ...newContractNames]\n  }\n\n  return result\n}\n\nconst App = () => {\n  const [apiKey, setAPIKey] = useLocalStorage(\"apiKey\", \"\")\n  const [clientInstance, setClientInstance] = useState(undefined as any)\n  const [receipts, setReceipts] = useLocalStorage(\"receipts\", [])\n  const [contracts, setContracts] = useState([] as string[])\n  const [themeType, setThemeType] = useState(\"dark\" as ThemeType)\n\n  const clientInstanceRef = useRef(clientInstance)\n  clientInstanceRef.current = clientInstance\n  const contractsRef = useRef(contracts)\n  contractsRef.current = contracts\n\n  useEffect(() => {\n    console.log(\"Remix Etherscan loading...\")\n    const client = new PluginClient()\n    createClient(client)\n    const loadClient = async () => {\n      await client.onload()\n      setClientInstance(client)\n      console.log(\"Remix Etherscan Plugin has been loaded\")\n\n      client.on(\"solidity\",\n        \"compilationFinished\",\n        (\n          fileName: string,\n          source: CompilationFileSources,\n          languageVersion: string,\n          data: CompilationResult\n        ) => {\n          console.log(\"New compilation received\")\n          const newContractsNames = getNewContractNames(data)\n\n          const newContractsToSave: string[] = [\n            ...contractsRef.current,\n            ...newContractsNames,\n          ]\n\n          const uniqueContracts: string[] = [...new Set(newContractsToSave)]\n\n          setContracts(uniqueContracts)\n        }\n      )\n\n      //const currentTheme = await client.call(\"theme\", \"currentTheme\")\n      //setThemeType(currentTheme.quality)\n      //client.on(\"theme\", \"themeChanged\", (theme) => {\n      //  setThemeType(theme.quality)\n      //})\n    }\n\n    loadClient()\n  }, [])\n\n  useEffect(() => {\n    if (!clientInstance) {\n      return\n    }\n\n    const receiptsNotVerified: Receipt[] = receipts.filter((item: Receipt) => {\n      return item.status !== \"Verified\"\n    })\n\n    if (receiptsNotVerified.length > 0) {\n      let timer1 = setInterval(() => {\n        receiptsNotVerified.forEach(async (item) => {\n          if (!clientInstanceRef.current) {\n            return\n          }\n          const network = await getNetworkName(clientInstanceRef.current)\n          if (network === \"vm\") {\n            return\n          }\n          const status = await getReceiptStatus(\n            item.guid,\n            apiKey,\n            getEtherScanApi(network)\n          )\n          if (status === \"Pass - Verified\") {\n            const newReceipts = receipts.map((currentReceipt: Receipt) => {\n              if (currentReceipt.guid === item.guid) {\n                return {\n                  ...currentReceipt,\n                  status: \"Verified\",\n                }\n              }\n              return currentReceipt\n            })\n\n            clearInterval(timer1)\n\n            setReceipts(newReceipts)\n\n            return () => {\n              clearInterval(timer1)\n            }\n          }\n        })\n      }, 5000)\n    }\n  }, [receipts, clientInstance, apiKey, setReceipts])\n\n  return (\n    <AppContext.Provider\n      value={{\n        apiKey,\n        setAPIKey,\n        clientInstance,\n        receipts,\n        setReceipts,\n        contracts,\n        setContracts,\n        themeType,\n        setThemeType,\n      }}\n    >\n      <Routes />\n    </AppContext.Provider>\n  )\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n"],"sourceRoot":""}